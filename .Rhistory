}
else {
pldat[, "Fleet"]
}
if (sex.flag)
plindx <- paste(plindx, pldat[, "sexes"])
if (method.flag)
plindx <- paste(plindx, pldat[, "method"])
uplindx <- unique(plindx)
Npanel <- length(uplindx)
NpanelSet <- min(length(uplindx), maxpanel)
Nr <- ceiling(sqrt(NpanelSet))
Nc <- ceiling(NpanelSet/Nr)
if (set.pars) {
par_current <- par()
par(mfrow = c(Nr, Nc), mar = c(2, 2, 1, 1) + 0.1,
mgp = c(0, 0.5, 0), oma = c(1.2, 1.2, 0, 0),
las = 1)
par(cex = 1)
}
for (i in 1:Npanel) {
subpldat <- pldat[plindx == uplindx[i], , drop = FALSE]
x <- subpldat[, ifelse(type == "con", "Lbin", "Yr")]
plot(x, subpldat[, "Obsmn"], pch = "-", xlim = if (length(x) >
1)
range(x)
else c(x - 0.5, x + 0.5), ylim = range(subpldat[,
c("Obslo", "Obshi", "ObsloAdj", "ObshiAdj", "Expmn")],
finite = TRUE, na.rm = TRUE), xlab = "", ylab = "")
segments(x, subpldat[, "Obslo"], x, subpldat[, "Obshi"],
lwd = 3, lend = 3)
if (plotadj) {
arrows(x, subpldat[, "ObsloAdj"], x, subpldat[,
"ObshiAdj"], lwd = 1, length = 0.04, angle = 90,
code = 3)
}
points(x, subpldat[, "Obsmn"], pch = 21, bg = "grey80")
ord <- order(x)
if (!datonly) {
if (length(x) > 1) {
lines(x[ord], subpldat[ord, "Expmn"], col = 4)
}
else {
lines(c(x - 0.5, x + 0.5), rep(subpldat[, "Expmn"],
2), col = 4)
}
}
fl <- fleetnames[subpldat[1, "Fleet"]]
yr <- paste(subpldat[1, "Yr"])
lab <- if (type == "con")
ifelse(Nfleet > 1, paste(yr, fl), yr)
else fl
if (sex.flag & label.sex) {
lab <- paste(lab, ifelse(subpldat[1, "sexes"] ==
0, "comb", "sex"))
}
if (method.flag) {
lab <- paste(lab, "meth", subpldat[1, "method"])
}
if (label.part) {
lab <- paste(lab, partition.labels)
}
mtext(lab, side = 3, at = mean(x))
}
ylab <- "Mean age"
if (type == "len") {
ylab <- "Mean length"
}
if (type == "size") {
units <- unique(plunits[plindx %in% uplindx])
if (length(units) == 1) {
if (units %in% c("kg", "lb")) {
ylab <- paste0("Mean weight (", units, ")")
}
if (units %in% c("cm", "in")) {
ylab <- paste0("Mean length (", units, ")")
}
}
else {
ylab <- paste0("Mean value (", paste(units, collapse = " or "),
")")
}
}
mtext(ylab, side = 2, las = 0, outer = TRUE)
mtext(ifelse(type == "con", "Length", "Year"), side = 1,
outer = TRUE)
if (set.pars) {
par(mfrow = par_current$mfrow, mar = par_current$mar,
mgp = par_current$mgp, oma = par_current$oma,
las = par_current$las)
}
}
if (!datonly) {
tmp <- matrix(sample(pldat[, "Std.res"], 1000 * nrow(pldat),
replace = TRUE), nrow(pldat))
confint <- as.vector(quantile(apply(tmp, 2, function(x) 1/var(x,
na.rm = TRUE)), c(0.025, 0.975), na.rm = TRUE))
Output <- c(w = Nmult, lo = confint[1], hi = confint[2])
Outs <- paste("Francis Weights - ", type, ": ", fleetnames[fleet],
": ", round(Nmult, 4), " (", round(confint[1], 4),
"-", round(confint[2], 4), ")", sep = "")
if (printit) {
print(Outs)
}
# return(Output)
return(pldat)
}
}
francisdat <- getTA1(summaryoutput, type = 'len', fleet = 1:5, plotit = T) %>% as.data.frame()
francisdat
francisdat$Fleet <- summaryoutput$FleetNames[francisdat$Fleet] ## name the actual fleets
# load("smabase.rdata",verbose=T)
summaryoutput$mnlen <- francisdat
runsSizeComp <- function(summaryoutput, standardized = c(0,1,2)[3]){
source("./R/getTA1.R") ## load SSMethod.TA1.8.FC function
francisdat <- getTA1(summaryoutput, type = 'len', fleet = 1:5, plotit = T) %>% as.data.frame()
francisdat$Fleet <- summaryoutput$FleetNames[francisdat$Fleet] ## name the actual fleets
# write.csv(francisdat,"francisDat.csv",row.names=F) ## save it
# load("smabase.rdata",verbose=T)
summaryoutput$mnlen <- francisdat
# save (smabase, file = 'smabase.rdata')
if(!exists(paste0(getwd(),"./plots/"))) dir.create(paste0(getwd(),"./plots/"))
std <- function(summaryoutput){
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("runstest_MeanSize_",assessment,".png"), width =7.5, height = 3.5,
res = 200, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("runstest_MeanSize_",assessment,".png"), width =7.5, height = 3.5,
res = 200, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
} ## end std
#-----------------------------------------
#  Do runs on size comps (mean length) using unstandardized residuals
#-----------------------------------------
#smabase$mnlen
unstd <- function(summaryoutput){
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual =  log(d$Obsmn)-log(d$Expmn)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("runstest_MeanSizeResid_",assessment,".png"), width =7.5, height = 3.5,
res = 200, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
} ## end unstd
if(standardized == 0) std(summaryoutput)
if(standardized == 1) unstd(summaryoutput)
if(standardized == 2) std(summaryoutput); unstd(summaryoutput)
}
if(3 %in% tests){runsSizeComp(summaryoutput, standardized = standardized, type = type,
fleet = fleet)}
runsSizeComp(summaryoutput, standardized = standardized, type = type,
fleet = fleet)
runsSizeComp <- function(summaryoutput,
standardized = c(0,1,2)[3],
type = 'len',
fleet = 1:nfleet(summaryoutput)){
source("./R/getTA1.R") ## load SSMethod.TA1.8.FC function
francisdat <- getTA1(summaryoutput, type = 'len', fleet = fleet, plotit = F) %>% as.data.frame()
francisdat$Fleet <- summaryoutput$FleetNames[francisdat$Fleet] ## name the actual fleets
# write.csv(francisdat,"francisDat.csv",row.names=F) ## save it
# load("smabase.rdata",verbose=T)
summaryoutput$mnlen <- francisdat
# save (smabase, file = 'smabase.rdata')
if(!exists(paste0(getwd(),"./plots/"))) dir.create(paste0(getwd(),"./plots/"))
std <- function(summaryoutput){
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("runstest_MeanSize_",assessment,".png"), width =7.5, height = 3.5,
res = 200, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("runstest_MeanSize_",assessment,".png"), width =7.5, height = 3.5,
res = 200, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
} ## end std
#-----------------------------------------
#  Do runs on size comps (mean length) using unstandardized residuals
#-----------------------------------------
#smabase$mnlen
unstd <- function(summaryoutput){
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual =  log(d$Obsmn)-log(d$Expmn)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("runstest_MeanSizeResid_",assessment,".png"), width =7.5, height = 3.5,
res = 200, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
} ## end unstd
if(standardized == 0) std(summaryoutput)
if(standardized == 1) unstd(summaryoutput)
if(standardized == 2) std(summaryoutput); unstd(summaryoutput)
}
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list =ls())
