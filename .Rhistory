yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
} ## end std
#-----------------------------------------
#  Do runs on size comps (mean length) using unstandardized residuals
#-----------------------------------------
#smabase$mnlen
unstd <- function(summaryoutput){
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual =  log(d$Obsmn)-log(d$Expmn)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("runstest_MeanSizeResid_",assessment,".png"), width =7.5, height = 3.5,
res = 200, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
} ## end unstd
if(standardized == 0) std(summaryoutput)
if(standardized == 1) unstd(summaryoutput)
if(standardized == 2) std(summaryoutput); unstd(summaryoutput)
}
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list =ls())
devtools::load_all(".")
install.packages('roxygen2')
devtools::load_all(".")
library(ggplot2)
install.packages("ggplot2")
devtools::load_all(".")
install.packages("dplyr")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
load("MLS.rdata",verbose=T)
setwd("C:/Users/mkapur/Dropbox/UW/coursework/FISH-555/Model_162")
# MLS<-SS_output(dir="C:/Users/mkapur/Dropbox/UW/coursework/FISH-555/Model_162",covar=FALSE, forecast = FALSE)
# save(MLS,file="MLS.rdata")
load("MLS.rdata",verbose=T)
summaryoutput <- MLS
devtools::load_all("~/GitHub/ssdiags")
runsSizeComp(summaryoutput, standardized = standardized, type = type,
fleet = fleet)
fleet = 1:4
type = 'len'
standardized = c(0,1,2)[3]
unsSizeComp(summaryoutput, standardized = standardized, type = type,
fleet = fleet)
runsSizeComp(summaryoutput, standardized = standardized, type = type,
fleet = fleet)
graphics.off()
devtools::load_all("~/GitHub/ssdiags")
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
Par = list(mfrow=c(ceiling(length(scenarios)/2),1),mar = c(1.2, 1.2, 1., 0.1),oma=c(0.5, 0.5, 0, 6), mgp =c(2.5,1,0), tck = -0.02,cex=0.8)
png(file = paste0("./plots/runstest_MeanSize_std.png"), width =7.5, height = 3.5,
res = 420, units = "in")
par(Par)
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par=par.save
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
summaryoutput$mnlen
# source("./R/getTA1.R") ## load SSMethod.TA1.8.FC function
francisdat <- getTA1(summaryoutput, type = 'len', fleet = fleet, plotit = F) %>% as.data.frame()
francisdat$Fleet <- summaryoutput$FleetNames[francisdat$Fleet] ## name the actual fleets
# load("smabase.rdata",verbose=T)
summaryoutput$mnlen <- francisdat
if(!exists(paste0(getwd(),"./plots/"))) dir.create(paste0(getwd(),"./plots/"))
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
dev.off()
par.save = par
# Extract residual for by scenario and index
d = summaryoutput$mnlen
d$scenario = factor("s1")
names(d)
scenarios = (levels(d$scenario))
d$residual = d$Std.res# log(d$Obs)-log(d$Exp)
d$Name = d$Fleet
agg = aggregate(residual~Yr+Name,d,mean)
#combine
idd = paste0(agg[,2])
yall = 1:length(idd)
iall = levels(factor(idd))
yrs = agg[,1]
for(j in 1:length(scenarios)){
ds = d[d$scenario==scenarios[j],]
jdd = paste0(ds$Yr,".",ds$Name)
yj = which(idd %in% jdd)
ylim = c(-max(abs(d$residual)),max(abs(d$residual)))
plot(yall,yall,type="n",xlab="Year",xlim=c(1,max(yall)),ylim=ylim,axes=F,xaxs = "i",yaxs="i")
axis(1,at=yall,labels=yrs,cex.axis=0.6,mgp=c(0.1,0.,0))
axis(2,cex.axis=0.6,mgp=c(0.5,0.0,0))
title(main=paste(ds$scenario)[1], mgp=c(0.1,0,0),cex.main=0.8,line=0.2)
abline(v=1)
#for(i in 1:length(indices)){}
i = 1
ni = length(unique(ds$Name))
indices = levels(factor(ds$Name))
for(i in 1:ni){
di = ds[ds$Name==indices[i],]
yi = yall[which(agg$Name==indices[i])]
get_runs = runs.sig3(di$residual)
lims = get_runs$sig3lim
polygon(c(yi,rev(yi)),c(rep(ylim[1],nrow(di)),rev(rep(ylim[2],nrow(di)))),col=ifelse(get_runs$p.runs<0.05,rgb(1,0,0,0.5),rgb(0,1,0,0.5)),border=0)
polygon(c(yi,rev(yi)),c(rep(lims[1],nrow(di)),rev(rep(lims[2],nrow(di)))),col=grey(0.5,0.5),border=0)
lines(yi,di$residual)
points(yi,di$residual,pch=21,bg=ifelse(abs(di$residual)>abs(lims[1]),2,0),cex=0.7)
text(mean(yi),ylim[2]*0.9,which(indices[i]==iall),cex=0.8)
}
if(j==1){  legend(par('usr')[2], par('usr')[4]-1, bty='n', xpd=NA,
c(paste0(1:length(iall),": ",iall)),cex=0.7)}
if(j==1){legend(par('usr')[2]+2, par('usr')[4], bty='n', xpd=NA,
c("Passed","Failed"),pch=15,col=c(rgb(0,1,0,0.5),rgb(1,0,0,0.5)),pt.cex=2,cex=0.7)}
abline(h=0,lty=2)
abline(h=max(abs(d$residual)))
for(i in 1:length(iall)){
abline(v=0.5+max(which(agg$Name==levels(factor(agg$Name))[i])))
}
mtext(paste("Years"), side=1, outer=TRUE, at=0.5,line=-0.3,cex=.8)
mtext(paste("Std. Residuals"), side=2, outer=TRUE, at=0.5,line=-0.3,cex=0.8)
}
devtools::load_all("~/GitHub/ssdiags")
## generate and/or load SS output object
setwd("C:/Users/mkapur/Dropbox/UW/coursework/FISH-555/Model_162")
# MLS<-SS_output(dir="C:/Users/mkapur/Dropbox/UW/coursework/FISH-555/Model_162",covar=FALSE, forecast = FALSE)
# save(MLS,file="MLS.rdata")
load("MLS.rdata",verbose=T)
basename(MLS)
getwd()
## generate and/or load SS output object
setwd("C:/Users/mkapur/Dropbox/UW/coursework/FISH-555")
wd <- paste0(getwd(),"/R0_profile/")
if(!exists(wd)) dir.create(wd)
install.packages('foreach','doSNOW')
library('foreach')
library('doSNOW')
install.packages("doSNOW")
library('doSNOW')
# library('foreach')
#library('doMC') # Comment out for windows
# library('doSNOW') # Uncomment for Windows
# setwd("C:/Users/felip/Dropbox/MLS_2019_1994/R0_profile")
parm.min <- 4.5
parm.max <-6.5
parm.step <- 0.1
getwd()
setwd(wd)
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 4
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
origwd <- getwd()
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
paste(dir.name,'/',parfile, sep='')
ii
dir.name
numdir
sprintf('%02d',ii)
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
ssdir.orig
rm(list = ls())
wd <- paste0(getwd(),"/R0_profile/")
if(!exists(wd)) dir.create(wd)
setwd(wd)
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 4
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
moddir <- "C:/Users/mkapur/Dropbox/UW/coursework/FISH-555/Workshop/SuperSimpleClean"
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
origwd <- moddir
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
ii = 1
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
origwd <- moddir
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
parm.min = 4.5
parm.max = 6.5
parm.step = 0.1
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep=''))
paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')
r4ss
?r4ss
SS_profile(dir=mydir, # directory
# "NatM" is a subset of one of the
# parameter labels in control.ss_new
model="ss",
masterctlfile="control.ss_new",
newctlfile="control_modified.ss",
string="steep",
profilevec=h.vec)
cbind(df$Label.1, df$SR_LN.R0.,df[,fleetmatch],df$ALL.1) %>%
filter(df$Label.1 == 'Length_like') %>%
select(-"df$Label.1") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL.1"='ALL.1')) %>%
melt(id = c('SR_LN.R0.')) %>%
ggplot(., aes(x = SR_LN.R0., y = value, color = variable)) +
theme_classic() +
theme(panel.grid = element_blank(),
legend.position = c(0.5,0.6),
legend.background = element_blank())+
geom_line(lwd = 1.1) +
scale_color_manual(values=c(rainbow(length(fleetmatch)),'black')) +
labs(x = profile.label,  color = '',
y = 'Change in Log-Likelihood',
title = 'Changes in Length_Like by Fleet')
library(r4ss)
library(colorRamps)
library(ggplot2)
library(dplyr); library(reshape2); require(gridExtra)
df <- read.csv("./R/r0profile_20190328_0858.csv")
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.')) %>%
ggplot(., aes(x = SR_LN.R0., y = value, color = variable,pch = variable)) +
theme_classic() +
theme(panel.grid = element_blank(),
legend.position = c(0.5,0.8))+
geom_line(lwd = 1.1) +
geom_point() +
scale_color_manual(values=c(rainbow(length(survmatch)),'black')) +
labs(x = profile.label, pch = '', color = '',
y = 'Change in Log-Likelihood',
title = 'Changes in Index Likelihood by Fleet')
profile.label <- expression(log(italic(R)[0]))
fleetmatch <-which(grepl("F.*_", names(df)))
survmatch <- which(grepl("S0.*_", names(df)))
## catch likelihoods -- all cols after "ALL.2"
catchmatch  <- grep('ALL.2',names(df)):length(names(df))
tomatch <- c(which(grepl("F.*_", names(df))),
which(grepl("S0.*_", names(df))))
FleetNames <- names(df)[tomatch][!is.na(names(df)[tomatch])]
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.')) %>%
ggplot(., aes(x = SR_LN.R0., y = value, color = variable,pch = variable)) +
theme_classic() +
theme(panel.grid = element_blank(),
legend.position = c(0.5,0.8))+
geom_line(lwd = 1.1) +
geom_point() +
scale_color_manual(values=c(rainbow(length(survmatch)),'black')) +
labs(x = profile.label, pch = '', color = '',
y = 'Change in Log-Likelihood',
title = 'Changes in Index Likelihood by Fleet')
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-df$Label) %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
update(dplyr)
update.packages(dplyr)
update.packages("dplyr")
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
?dplyr
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-c("df$Label") )%>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
# select(-c("df$Label") )%>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
