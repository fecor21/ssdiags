library('doSNOW')
install.packages("doSNOW")
library('doSNOW')
# library('foreach')
#library('doMC') # Comment out for windows
# library('doSNOW') # Uncomment for Windows
# setwd("C:/Users/felip/Dropbox/MLS_2019_1994/R0_profile")
parm.min <- 4.5
parm.max <-6.5
parm.step <- 0.1
getwd()
setwd(wd)
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 4
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
origwd <- getwd()
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
paste(dir.name,'/',parfile, sep='')
ii
dir.name
numdir
sprintf('%02d',ii)
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
ssdir.orig
rm(list = ls())
wd <- paste0(getwd(),"/R0_profile/")
if(!exists(wd)) dir.create(wd)
setwd(wd)
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 4
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
moddir <- "C:/Users/mkapur/Dropbox/UW/coursework/FISH-555/Workshop/SuperSimpleClean"
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
origwd <- moddir
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
ii = 1
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
origwd <- moddir
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
parm.min = 4.5
parm.max = 6.5
parm.step = 0.1
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep=''))
paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')
r4ss
?r4ss
SS_profile(dir=mydir, # directory
# "NatM" is a subset of one of the
# parameter labels in control.ss_new
model="ss",
masterctlfile="control.ss_new",
newctlfile="control_modified.ss",
string="steep",
profilevec=h.vec)
cbind(df$Label.1, df$SR_LN.R0.,df[,fleetmatch],df$ALL.1) %>%
filter(df$Label.1 == 'Length_like') %>%
select(-"df$Label.1") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL.1"='ALL.1')) %>%
melt(id = c('SR_LN.R0.')) %>%
ggplot(., aes(x = SR_LN.R0., y = value, color = variable)) +
theme_classic() +
theme(panel.grid = element_blank(),
legend.position = c(0.5,0.6),
legend.background = element_blank())+
geom_line(lwd = 1.1) +
scale_color_manual(values=c(rainbow(length(fleetmatch)),'black')) +
labs(x = profile.label,  color = '',
y = 'Change in Log-Likelihood',
title = 'Changes in Length_Like by Fleet')
library(r4ss)
library(colorRamps)
library(ggplot2)
library(dplyr); library(reshape2); require(gridExtra)
df <- read.csv("./R/r0profile_20190328_0858.csv")
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.')) %>%
ggplot(., aes(x = SR_LN.R0., y = value, color = variable,pch = variable)) +
theme_classic() +
theme(panel.grid = element_blank(),
legend.position = c(0.5,0.8))+
geom_line(lwd = 1.1) +
geom_point() +
scale_color_manual(values=c(rainbow(length(survmatch)),'black')) +
labs(x = profile.label, pch = '', color = '',
y = 'Change in Log-Likelihood',
title = 'Changes in Index Likelihood by Fleet')
profile.label <- expression(log(italic(R)[0]))
fleetmatch <-which(grepl("F.*_", names(df)))
survmatch <- which(grepl("S0.*_", names(df)))
## catch likelihoods -- all cols after "ALL.2"
catchmatch  <- grep('ALL.2',names(df)):length(names(df))
tomatch <- c(which(grepl("F.*_", names(df))),
which(grepl("S0.*_", names(df))))
FleetNames <- names(df)[tomatch][!is.na(names(df)[tomatch])]
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.')) %>%
ggplot(., aes(x = SR_LN.R0., y = value, color = variable,pch = variable)) +
theme_classic() +
theme(panel.grid = element_blank(),
legend.position = c(0.5,0.8))+
geom_line(lwd = 1.1) +
geom_point() +
scale_color_manual(values=c(rainbow(length(survmatch)),'black')) +
labs(x = profile.label, pch = '', color = '',
y = 'Change in Log-Likelihood',
title = 'Changes in Index Likelihood by Fleet')
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-df$Label) %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
update(dplyr)
update.packages(dplyr)
update.packages("dplyr")
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-"df$Label") %>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
?dplyr
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
select(-c("df$Label") )%>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
cbind(df$Label, df$SR_LN.R0.,df[,survmatch],df$ALL) %>%
filter(df$Label == 'Surv_like') %>%
# select(-c("df$Label") )%>%
plyr::rename(c("df$SR_LN.R0." = "SR_LN.R0.", "df$ALL"='ALL')) %>%
melt(id = c('SR_LN.R0.'))
log(0)
?SSplotComparisons
require(r4ss)
?SSplotComparisons
mod.sum
## generate all r4ss comparison plots on suite of models (recommend n < 10)
## update covar and ncol as needed
mod.sum <- lapply(mods,SS_output, covar = FALSE) %>% SSsummarize(.)
require(r4ss)
require(dplyr)
require(ggplot2)
## create list of subdirs in this directory, you can use 'grep' if needed
mods <- list.dirs(rootdir, recursive = FALSE)[!grepl('plots',list.dirs(rootdir, recursive = FALSE))]
## identify directory that has executed models in it
rootdir <- "C:/Users/Maia Kapur/Dropbox/UW/coursework/FISH-555/stm_mods/wp_test"
## create list of subdirs in this directory, you can use 'grep' if needed
mods <- list.dirs(rootdir, recursive = FALSE)[!grepl('plots',list.dirs(rootdir, recursive = FALSE))]
if(!exists(paste0(rootdir,"/plots"))) dir.create(paste0(rootdir,"/plots"))
## generate all r4ss comparison plots on suite of models (recommend n < 10)
## update covar
## identify directory that has executed models in it
rootdir <- "C:/Users/MKapur/Dropbox/UW/coursework/FISH-555/stm_mods/wp_test"
## create list of subdirs in this directory, you can use 'grep' if needed
mods <- list.dirs(rootdir, recursive = FALSE)[!grepl('plots',list.dirs(rootdir, recursive = FALSE))]
## generate all r4ss comparison plots on suite of models (recommend n < 10)
## update covar and ncol as needed
mod.sum <- lapply(mods,SS_output, covar = FALSE) %>% SSsummarize(.)
list.dirs(rootdir, recursive = FALSE)[!grepl('plots' |
'results',list.dirs(rootdir, recursive = FALSE))]
!grepl('plots' |
'results',list.dirs(rootdir, recursive = FALSE))
!grepl('plots' |'results',list.dirs(rootdir, recursive = FALSE))
!grepl('plots|results',list.dirs(rootdir, recursive = FALSE))
## create list of subdirs in this directory, you can use 'grep' if needed
mods <- list.dirs(rootdir, recursive = FALSE)[!grepl('plots|results',list.dirs(rootdir, recursive = FALSE))]
mods
## generate all r4ss comparison plots on suite of models (recommend n < 10)
## update covar and ncol as needed
mod.sum <- lapply(mods,SS_output, covar = FALSE) %>% SSsummarize(.)
SSplotComparisons(mod.sum, subplots = 1,print = F, plotdir = paste0(rootdir,"/plots"))
SSplotComparisons(mod.sum, subplots = 2,print = F, plotdir = paste0(rootdir,"/plots"))
dev.off()
SSplotComparisons(mod.sum, subplots = 2,print = F, plotdir = paste0(rootdir,"/plots"))
SSplotComparisons(mod.sum, subplots = 3,print = F, plotdir = paste0(rootdir,"/plots"))
str(mod.sum)
## Plotting using SPRSeries.csv generated above ----
sprs <- read.csv(paste0(rootdir,"/results/SPR_series.csv"))
paste0(rootdir,"/results/SPR_series.csv")
## Plotting using SPRSeries.csv generated above ----
sprs <- read.csv(paste0(rootdir,"/results/SPRseries.csv"))
head(sprs)
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass')
graphics.off()
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass')
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel_grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB)))
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass')
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = 'Spectral') +
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass')
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = 'Reds') +
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = rev('Spectral')) +
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = "Greens") +
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = "Dark2") +
geom_line() + geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = "Dark2") +
geom_line(lwd = 1.1) +
geom_point(col = 'black') +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
names(sprs)
grep('spb',mod.sum)
grep('SPB',mod.sum)
grep('DEVS',mod.sum)
grep('devs',mod.sum)
mod.sum[grep('devs',mod.sum)]
grep('rec',mod.sum)
mod.sum[8]
mod.sum[8]
mod.sum[8]$Label
str(mod.sum[8])
data.frame(mod.sum[8])
pars <- data.frame(mod.sum[8])
[grep('Dev'),pars$Label]
grep('Dev',pars$Label)
pars$Label
names(pars)
pars$pars.recdev
pars$pars.Label
grep('RecrDev',pars$pars.Label)
pars[grep('RecrDev',pars$pars.Label)]
pars[grep('RecrDev',pars$pars.Label),]
pars[grep('RecrDev',pars$pars.Label),] %>%
select(pars.model1, pars.model2, pars.Yr) %>%
plyr::rename(c("pars.model1" = basename(mods[1]),"pars.model2" = basename(mods[2]))) %>%
reshape2::melt(id = 'pars.Yr')
ggplot(recdevs, aes(x =  pars.Y, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
# scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = "Dark2") +
geom_line(lwd = 1.1) +
geom_point(col = 'black') +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
recdevs <- pars[grep('RecrDev',pars$pars.Label),] %>%
select(pars.model1, pars.model2, pars.Yr) %>%
plyr::rename(c("pars.model1" = basename(mods[1]),"pars.model2" = basename(mods[2]))) %>%
reshape2::melt(id = 'pars.Yr')
ggplot(recdevs, aes(x =  pars.Y, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
# scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = "Dark2") +
geom_line(lwd = 1.1) +
geom_point(col = 'black') +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
# scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = "Dark2") +
geom_line(lwd = 1.1) +
geom_point(col = 'black') +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
geom_hline(yintercept = 0, col = 'red') +
scale_color_brewer(palette = "Blues") +
geom_line(lwd = 1.1) +
geom_point(col = 'black') +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
geom_hline(yintercept = 0, col = 'red') +
scale_color_brewer(palette = "Blues") +
geom_line(lwd = 1.1) +
geom_point() +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
geom_hline(yintercept = 0, col = 'red') +
scale_color_manual(values = c('dodgerblue2','dodgerblue3')) +
geom_line(lwd = 1.1) +
geom_point() +
labs(x = 'Year', y = 'Recruitment Deviates', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
geom_hline(yintercept = 0, col = 'red') +
scale_color_manual(values = c('dodgerblue2','skyblue')) +
geom_line(lwd = 1.1) +
geom_point() +
labs(x = 'Year', y = 'Recruitment Deviates', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
geom_hline(yintercept = 0, col = 'red') +
scale_color_manual(values = c('dodgerblue2','skyblue')) +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_point() +
labs(x = 'Year', y = 'Recruitment Deviates', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
geom_hline(yintercept = 0, col = 'red') +
scale_color_manual(values = c('dodgerblue2','green')) +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_point() +
labs(x = 'Year', y = 'Recruitment Deviates', color = "")
ggplot(recdevs, aes(x =  pars.Yr, y = value, col = variable)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
geom_hline(yintercept = 0, col = 'red') +
scale_color_manual(values = c('dodgerblue2','grey22')) +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_point() +
labs(x = 'Year', y = 'Recruitment Deviates', color = "")
## plot SPB over time for all models ----
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_brewer(palette = "Dark2") +
geom_line(lwd = 1.1) +
geom_point(col = 'black') +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
## plot SPB over time for all models ----
ggplot(sprs, aes(x = Yr, y = SSB, col = MOD)) +
theme_minimal()+
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.9)) +
scale_y_continuous(limits = c(0,1.1*max(sprs$SSB))) +
scale_color_manual(values = c('dodgerblue2','grey22')) +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_point(col = 'black') +
labs(x = 'Year', y = 'Spawning Stock Biomass', color = "")
devtools::install_github("mkapur/kaputils")
6
?install_github
devtools::install_github("mkapur/kaputils")
require(r4ss)
require(dplyr)
require(ggplot2)
devtools::install_github("mkapur/kaputils")
## if prompted don't update anything
# library(kaputils)
graphics.off()
devtools::install_github("mkapur/kaputils")
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
require(kaputils)
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
library(kaputils)
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
