devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
library(kaputils)
kaputils::extractResults
kaputils::extractResults(
rootdir,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## generate CSV for post-hoc analysis **kaputils**
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
source(https://github.com/mkapur/kaputils/blob/master/R/extractResults.R)
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils",force = T)
extractResults
?kaputils::extractResults
??kaputils::extractResults
?extractResults
require(kaputils)
kaputils::extractResults
install.packages("C:/Users/Maia Kapur/Dropbox/kaputils",
repos = NULL,
type = "source")
library(kaputils)
kaputils::extractResults(
rootdir,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
kaputils::extractResults
devtools::install_github("mkapur/kaputils")
require(r4ss)
require(dplyr)
# install.packages("C:/Users/Maia Kapur/Dropbox/kaputils",
#                  repos = NULL,
#                  type = "source")
library(kaputils)
kaputils::extractResults(
rootdir,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## generate kobe with multiple end-points **kaputils**
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"))
## generate kobe with multiple end-points **kaputils**
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv")m
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY')
## generate kobe with multiple end-points **kaputils**
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY')
## generate kobe with multiple end-points **kaputils**
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/")
doLegend = T)
## generate kobe with multiple end-points **kaputils**
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
devtools::install_github("mkapur/kaputils")
## generate kobe with multiple end-points **kaputils**
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
devtools::install_github("mkapur/kaputils")
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
require(r4ss)
require(dplyr)
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
devtools::install_github("mkapur/kaputils")
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
kaputils::plotKobe_compare
devtools::install_github("mkapur/kaputils")
require(r4ss)
require(dplyr)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
require(r4ss)
require(dplyr)
devtools::install_github("mkapur/kaputils")
# install.packages("C:/Users/Maia Kapur/Dropbox/kaputils",
#                  repos = NULL,
#                  type = "source")
library(kaputils)
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
require(r4ss)
require(dplyr)
devtools::install_github("mkapur/kaputils")
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
rm(list =  ls())
require(r4ss)
require(dplyr)
devtools::install_github("mkapur/kaputils")
## generate all r4ss comparison plots on suite of models (recommend n < 10)
## update covar and ncol as needed
mod.sum <- lapply(mods,SS_output, covar = FALSE) %>% SSsummarize(.)
SSplotComparisons(mod.sum, print = T, plotdir = paste0(rootdir,"/plots"))
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
## identify directory that has executed models in it
rootdir <- "C:/Users/Maia Kapur/Dropbox/UW/coursework/FISH-555/stm_mods/wp_test"
if(!exists(paste0(rootdir,"/plots"))) dir.create(paste0(rootdir,"/plots"))
## create list of subdirs in this directory, you can use 'grep' if needed
mods <- list.dirs(rootdir, recursive = FALSE)
## generate all r4ss comparison plots on suite of models (recommend n < 10)
## update covar and ncol as needed
mod.sum <- lapply(mods,SS_output, covar = FALSE) %>% SSsummarize(.)
mods
## create list of subdirs in this directory, you can use 'grep' if needed
mods <- list.dirs(rootdir, recursive = FALSE)[!grepl('plots',list.dirs(rootdir, recursive = FALSE))]
mods
## generate all r4ss comparison plots on suite of models (recommend n < 10)
## update covar and ncol as needed
mod.sum <- lapply(mods,SS_output, covar = FALSE) %>% SSsummarize(.)
SSplotComparisons(mod.sum, print = T, plotdir = paste0(rootdir,"/plots"))
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
library(r4ss)
model_dir <- "C:/Users/Maia Kapur/Dropbox/UW/coursework/FISH-555/stm_mods/wp_test/Model_716"    #<----------------
model <- SS_output(model_dir,ncols = 500)
# Kobe plot layout setting
x_max = 4.0
x_min = 0.0
y_max = 4.0
y_min = 0
rnames <- base.model$derived_quants$Label
index_SSB_MSY = which(rnames==paste("SSB_MSY",sep=""))
index_Fstd_MSY = which(rnames==paste("Fstd_MSY",sep=""))
index_SPR_MSY= which(rnames==paste("SPR_MSY",sep=""))
year_vec = min(base.model$sprseries$Yr):max(base.model$sprseries$Yr)
SSB_MSY_est = base.model$derived_quants[index_SSB_MSY:index_SSB_MSY,2]
Fstd_MSY_est = base.model$derived_quants[index_Fstd_MSY:index_Fstd_MSY,2]
SPR_MSY_est = base.model$derived_quants[index_SPR_MSY:index_SPR_MSY,2]
SSBratio = base.model$sprseries$SSB/SSB_MSY_est
Fratio = base.model$sprseries$F_report/Fstd_MSY_est
SPRratio = base.model$sprseries$SPR/SPR_MSY_est
### Fration terminal year * sqrt((sd terminal year/F terminal year)^2+(sd Fmsy/Fmsy)^2)
### Fration terminal year * sqrt((sd terminal year/B terminal year)^2+(sd Bmsy/Bmsy)^2)
## F1-10
#Fstd<-Fratio[42]*sqrt((0.011509/0.0743)^2+(0.003036/0.169564)^2)
#SSBstd<-SSBratio[42]*sqrt((5000.23/29593.2)^2+(638.781/15723.1)^2)
## F3-10
#Fstd<-Fratio[42]*sqrt((0.018106/0.131934)^2+(0.003103/0.339866)^2)
#SSBstd<-SSBratio[42]*sqrt((5000.23/29593.2)^2+(638.781/15723.1)^2)
#Fratio_95<-Fratio[42]+1.96*Fstd
#Fratio_05<-Fratio[42]-1.96*Fstd
#SSBratio_95<-SSBratio[42]+1.96*SSBstd
#SSBratio_05<-SSBratio[42]-1.96*SSBstd
# Kobe plot layout setting
x_max = 4.0
x_max = 4.0
x_min = 0.0
y_max = 4.0
y_min = 0
rnames <- base.model$derived_quants$Label
index_SSB_MSY = which(rnames==paste("SSB_MSY",sep=""))
index_Fstd_MSY = which(rnames==paste("Fstd_MSY",sep=""))
index_SPR_MSY= which(rnames==paste("SPR_MSY",sep=""))
year_vec = min(base.model$sprseries$Yr):max(base.model$sprseries$Yr)
SSB_MSY_est = base.model$derived_quants[index_SSB_MSY:index_SSB_MSY,2]
Fstd_MSY_est = base.model$derived_quants[index_Fstd_MSY:index_Fstd_MSY,2]
SPR_MSY_est = base.model$derived_quants[index_SPR_MSY:index_SPR_MSY,2]
SSBratio = base.model$sprseries$SSB/SSB_MSY_est
Fratio = base.model$sprseries$F_report/Fstd_MSY_est
SPRratio = base.model$sprseries$SPR/SPR_MSY_est
### Fration terminal year * sqrt((sd terminal year/F terminal year)^2+(sd Fmsy/Fmsy)^2)
### Fration terminal year * sqrt((sd terminal year/B terminal year)^2+(sd Bmsy/Bmsy)^2)
## F1-10
#Fstd<-Fratio[42]*sqrt((0.011509/0.0743)^2+(0.003036/0.169564)^2)
#SSBstd<-SSBratio[42]*sqrt((5000.23/29593.2)^2+(638.781/15723.1)^2)
## F3-10
#Fstd<-Fratio[42]*sqrt((0.018106/0.131934)^2+(0.003103/0.339866)^2)
#SSBstd<-SSBratio[42]*sqrt((5000.23/29593.2)^2+(638.781/15723.1)^2)
#Fratio_95<-Fratio[42]+1.96*Fstd
#Fratio_05<-Fratio[42]-1.96*Fstd
#SSBratio_95<-SSBratio[42]+1.96*SSBstd
#SSBratio_05<-SSBratio[42]-
plot(c(x_min,x_max),c(y_min,y_max),type="n", ylab="", xlab="")
mtext(side=1, expression(SSB/SSB[MSY]),line=2.5, cex=1)
mtext(side=2, expression(F/F[MSY]),line=2.5, cex=1)
polygon(c(x_min,1,1,x_min), c(1,1,y_min,y_min),col="khaki1")
polygon(c(1,x_max,x_max,1), c(1,1,y_min,y_min),col="palegreen")
polygon(c(x_min,1,1,x_min), c(1,1,y_max,y_max),col="salmon")
polygon(c(1,x_max,x_max,1), c(1,1,y_max,y_max),col="khaki1")
points(SSBratio,Fratio,type="o",bg="black",pch=21,col="black",cex=1.2)
points(SSBratio[1],Fratio[1],type="o",bg="white",pch=21,col="white",cex=1.2)
points(SSBratio[length(year_vec)-1],Fratio[length(year_vec)-1],type="o",bg="orange",pch=21,col="orange",cex=1.2)
#points(SSBratio[length(year_vec)],Fratio[length(year_vec)],type="o",bg="blue",pch=21,col="blue",cex=1.2)
#SSBratio
#Fratio 0.693362522	1.034111657
points(c(SSBratio[length(year_vec)-1],SSBratio[length(year_vec)-1])
,c(Fratio_05,Fratio_95)
,type="l",lwd=2,lty=3)
points(SSBratio[length(year_vec)-1],Fratio[length(year_vec)-1],type="o",bg="orange",pch=21,col="orange",cex=1.2)
require(r4ss)
require(dplyr)
devtools::install_github("mkapur/kaputils")
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
## identify directory that has executed models in it
rootdir <- "C:/Users/Maia Kapur/Dropbox/UW/coursework/FISH-555/stm_mods/wp_test"
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
kobe.type = 'ISC',
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
devtools::install_github("mkapur/kaputils")
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
kobe.type = 'ISC',
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
lotKobe_compare(rootdir,
kobe.type = 'ISC',
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
kobe.type = 'ISC',
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
require(dplyr)
require(r4ss)
## **kaputils** generate kobe with multiple end-points ----
## will save to rootdir/plots
## this runs way faster if you pre-execute extractResults and reference the management_quantities.csv
## you must specify the name of the biomass column (varies by SS run)
kaputils::plotKobe_compare(rootdir,
kobe.type = 'ISC',
mq_csv = paste0(rootdir,"/results/management_quantities.csv"),
b.name = "SPB_SSBMSY",
f.name = 'F_FMSY',
pattern = 'Model',
subpattern = NA,
saveplot = T,
plotloc = paste0(rootdir,"/plots/"),
doLegend = T)
require(r4ss)
require(dplyr)
require(ggplot2)
devtools::install_github("mkapur/kaputils")
## identify directory that has executed models in it
rootdir <- "C:/Users/MKapur/Dropbox/UW/coursework/FISH-555/stm_mods/wp_test"
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
library(kaputils)
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
devtools::load_all()
devtools::install_github("mkapur/kaputils")
## **kaputils** generate CSV for post-hoc analyses ----
## will save to rootdir/results
## You pass a vector of fleetnames to subset for extraction or leave as "all"
kaputils::extractResults(
rootdir,
terminal_year = 2017,
pattern = 'Model',
subpattern = NA,
writeTables = TRUE,
FleetName = 'All'
)
